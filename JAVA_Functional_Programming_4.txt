public void beep();
publec boolean checkAlarm();
public void alarm();

//Alarm

public void alarm() {
boolean on = checkAlarm();
if(on){
 beep();
 on = checkAlarm();
}
if(on){
 beep();
 on = checkAlarm();
}
if(on){
 beep();
 on = checkAlarm();
} 


//While loops
public void alarm() {
boolean on = checkAlarm();

while(on){
 beep();
 on = checkAlarm();
 }
}

//GOOGOL

String googol = "1";
int len = googol.length();
while(len < 101){

googol = goolol + "0";
len = googol.length();

}

//Start Simple


public in keepRolling(){
int dice1 = rollDice();
int dice2 = rollDice();
int count = 1;

while (!(dice1 == dice2)){
 dice1 = rollDice();
 dice2 = rollDice();
 count = count + 1;
}
 return count;

}

// 3 DICE

public in keepRolling(){
int dice1 = rollDice();
int dice2 = rollDice();
int dice3 = rollDice();
int count = 1;

while (!(dice1 == dice2 && dice2 == dice3)){
 dice1 = rollDice();
 dice2 = rollDice();
 dice3 = rollDice();
 count = count + 1;
}
 return count;

}

// 5 DICE

public int keepRolling() {
    int dice1 = rollDice();
    int dice2 = rollDice();
    int dice3 = rollDice();
    int dice4 = rollDice();
    int dice5 = rollDice();
    int count = 1;
    while (!(dice1 == dice2 && dice2 == dice3 && dice3 == dice4 && dice4 == dice5)) {
        //we need to re-roll
        dice1 = rollDice();
        dice2 = rollDice();
        dice3 = rollDice();
        dice4 = rollDice();
        dice5 = rollDice();
        count = count + 1;
    }
    return count;
}

//While loops

public void raiseAlarm (int numOfWarnings){
 int = 1;
while(i <= numOfWarnings){
 System.out.println("Warning");
 i++;
}
}

raiseAlarm (5);
// (1) loop counter
// (2) loop condition
// (3) loop increment


//FOR

public void raiseAlarm (int numOfWarnings){

for (int i =1; i<=numOfWarnings); i++){
  System.out.println("Warning");
 }
}

//FOR LOOP COUNTERS
public void raiseAlarm (int numOfWarnings){

for (int i =1; i<=numOfWarnings); i++){
  System.out.println("Warning # " + i);
 }
}

// Infinite loop!!!
for (int i = 1; i <= 3; i++){
 i = i-1;
 System.out.println(i);
 }

// loop!!!
for (int i = 1; i <= 3; i++){
 int x = i-1;
 System.out.println(x);
 }

// loop!!!
for (int i = 1; i <= 3; i++){
 System.out.println(i*2);
 }


// Counting the bloks
public int countBlocks (int levels){
 int total = 0;
 for(int i=1; i<=levels; i++){
 total = total + (i*i)
}
 return total;
}

//
public int addNumers() {
int sum = 0;
 for (int i =15; i<=20; i++){
 sum = sum + i;
 }
return sum;
}

//
 for (int i = 1; i <=3; i++){
 System.out.println(i); 
 }

//COUNTING DOWN
 for (int i = 3 ; i>= 1; i--){
 System.out.println(i); 
 }

// i = i + 1 -> i++
// i = i * 3 -> i *= 3 
// i = i - 1 -> i--
// i = i/2 -> i/=2 
// i = i - 6 -> i-=6

// FOR LOOP STEPS

public void evenNumbers(){
 for (int i = 3; i<=10; i+=2){
  System.out.println(i);
 }
}

//WIFI SEARCH - BREAK

public void seachWifi(){
 for (int i=1; i <=10; i++){
 boolean wifiAvailable = checkWifi();
 if (wifiAvailable) {
 System.out.println("Wifi found");
  break;
 }
 }
}

//ROLL A SIX


public boolean rollASix(){
 int dice = rollDice();
 while(dice!=6){
  dice = rollDice();
  if (dice == 3)
  break;
 }
  if (dice ==6)
     return true;
  else
     return false;

}


//

public int martingale() {
 int money = 1000;
 int target = 1200;
 int bet = 10;
 while (money > bet) {
  boolean win = play();
  if (win) {
   money += bet;
   bet = 10;
  } else {
   money -= bet;
   bet *= 2;
  }
 if (money>= target)
  break;
 }
 return money;
}


//PRESS CONFERENCE = ARRAYS

in [] numbers = {12,1,777,3,4,0,0,121,1,-4,0,-100,2};
System.out.println(numbers[0]);
System.out.println(numbers[9] * numbers[12]);

double [] fracNumbers={4.0, 6.2, 3.75, 5.1};

String [] newsOutlet={"abc", "bbc", "CNN", "CBS", "AP", "NCB", "FOX", "npr", "sky", "Aljazeera"};
double lucky = Math.random();
lucky *=10;

int luckyIndex = (int) lucky;

System.out.print(newOutlet[luckyIndex]);

//
public duble CalculateAverage (double [] temperatures){
 int size = temperatures.length;
 double total = 0;

  for (int i=0; i<size; i++){
  total += temperatures[i];
  }
 double average = total/size;
 return average;
}

}

//Search for min
double [] speed = {7.85, 7.32, 4.9, 6.22, 5.4, 7.3, 5.19}

public double search(double[] speed){
int size = speed.length;
double min = speed[0];

for (int i=1; i<size; i++){
 if (speed[i]<min){
   min = speed[i];
 }
} 
return min;
} 

//Search for longest name
String [] names = {"Nakita", "Elina", "Sheree", "Guy", "Calandra", "Perry", "Heike", "Harris", "Lynsey", "Issac"}

public String findLongestName(String [] names){
int size = names.length;
String longestName = names[0];

for (int i=1; i<size; i++){
 if (names[i].length() > longestName.length()){
  longestName = names[i];
 }
} 
return longestName;
} 

// 2D Arrays
public static double englishAverage(int[][] grades){
int total =0;
for(i=0; i<5; i++) {
 total+=grades[1][i];
}
double average = total/5.0;
return average;
}


// 2D Arrays - 2
public static double englishAverage(int[][] grades){
int total =0;
for(i=0; i<4; i++) {
 total+=grades[i][2];
}
double average = total/4.0;
return average;
}

// 2D Arrays - 3
public static double englishAverage(int[][] grades, int student){
int subject = grades.lenght;
int total =0;
for(i=0; i<subject; i++) {
 total+=grades[i][student];
}
double average = total/(double)subjects;
return average;
}


// 2D Arrays - NESTED LOOPS
for(int i =0; i<3; i++){
  for(int j=0; j<3; j++){
   System.out.println("Hi!");
   }
}


public static double englishAverage(int[][] grades, int student){
int subject = grades.lenght;
int total =0;
for(i=0; i<subject; i++) {
 total+=grades[i][student];
}
double average = total/(double)subjects;
return average;
}







