CREATE TABLE celebs (
id INTEGER,
name TEXT,
age INTEGER
);

INSERT INTO celebs (id, name, age) VALUES (1, 'Justin Bieber', 22);
INSERT INTO celebs (id, name, age) VALUES (2, 'Beyonce Knowles', 33);
INSERT INTO celebs (id, name, age) VALUES (3, 'Jeremy Lin', 26);
INSERT INTO celebs (id, name, age) VALUES (4, 'Taylor Swift', 26);

 select * from celebs

 ALTER TABLE celebs
 ADD COLUMN twitter_handle TEST;

UPDATE celebs 
SET twitter_handle = '@taylorswift13' 
WHERE id = 4;

 DELETE from celebs
 WHERE twitter_handle is NULL;

CREATE TABLE celebs(
id INTEGER PRIMARY KEY,
name TEXT UNIQUE,
date_of_birth TEST NOT NULL,
date_of_death TEXT DEFAULT 'Not Applicable'

 );

SELECT * FROM movies;

Zmiana nazwy kolumny:
SELECT imdb_rating AS 'IMDb'
FROM movies;

Wybór unikatowych wartości z kolumy:
SELECT DISTINCT year 
FROM movies;

SELECT * 
FROM movies 
WHERE imdb_rating < 5;

SELECT * 
FROM movies
WHERE name LIKE 'Se_en';

SELECT * 
FROM movies 
WHERE name LIKE '%man%';

SELECT * 
FROM movies 
WHERE name LIKE 'The %';

SELECT name
FROM movies 
WHERE imdb_rating IS NOT NULL;

SELECT name
FROM movies 
WHERE imdb_rating IS NULL;


SELECT name, year
FROM movies
ORDER BY name;

SELECT name, year, imdb_rating
FROM movies
ORDER BY imdb_rating DESC;


SELECT *
FROM movies
ORDER BY imdb_rating DESC
LIMIT 3;

SELECT name,
 CASE
  WHEN imdb_rating > 8 THEN 'Fantastic'
  WHEN imdb_rating > 6 THEN 'Poorly Received'
  ELSE 'Avoid at All Costs'
 END
FROM movies;

SELECT name,
 CASE
  WHEN genre = 'romance' THEN 'Chill'
  WHEN genre = 'comedy' THEN 'Chill'
  ELSE 'Intense'
 END AS 'Mood'
FROM movies;

SELECT COUNT(*)
FROM fake_apps;

ELECT COUNT(*)
FROM fake_apps
where price =0.0;

SELECT MIN(downloads)
FROM fake_apps;

SELECT name, MAX(price)
FROM fake_apps;

SELECT AVG(price)
FROM fake_apps;

SELECT ROUND(AVG(price), 2)
FROM fake_apps;

SELECT name, price, downloads, COUNT(downloads) 
FROM fake_apps
where downloads > 20000
GROUP BY price;

SELECT category, SUM(downloads)
FROM fake_apps
GROUP BY category;

SELECT category, 
   price,
   AVG(downloads)
FROM fake_apps
GROUP BY 1, 2;


SELECT price, 
   ROUND(AVG(downloads)),
   COUNT(*), name
FROM fake_apps
GROUP BY price
HAVING count(price) >10

SELECT *
FROM orders
LIMIT 5;
 
SELECT *
FROM subscriptions
LIMIT 5;
 
SELECT * 
FROM customers
LIMIT 5;


ELECT orders.order_id,
   customers.customer_name
FROM orders
JOIN customers
  ON orders.customer_id = customers.customer_id;

SELECT  *
FROM orders
JOIN subscriptions
  ON orders.subscription_id = subscriptions.subscription_id;

SELECT *
FROM orders
JOIN subscriptions
	ON orders.subscription_id = subscriptions.subscription_id
WHERE subscriptions.description = 'Fashion Magazine';

SELECT COUNT(*)
FROM newspaper
JOIN online
 ON newspaper.id = online.id;

SELECT *
FROM newspaper
LEFT JOIN  online
 ON newspaper.id = online.id;

 SELECT *
FROM newspaper
LEFT JOIN  online
 ON newspaper.id = online.id
 WHERE online.id IS NULL;

select *
from classes
join students
on classes.id = students.class_id;


SELECT COUNT(*)
FROM newspaper
WHERE start_month <= 3 
  AND end_month >= 3;
  
SELECT *
FROM newspaper
CROSS JOIN months;

SELECT *
FROM newspaper
CROSS JOIN months
WHERE start_month <= month 
  AND end_month >= month;

SELECT month, 
  COUNT(*)
FROM newspaper
CROSS JOIN months
WHERE start_month <= month 
  AND end_month >= month
GROUP BY month

SELECT *
FROM newspaper
UNION
SELECT *
FROM online;

WITH previous_query AS (
   SELECT customer_id,
      COUNT(subscription_id) AS 'subscriptions'
   FROM orders
   GROUP BY customer_id
)
SELECT customers.customer_name, 
   previous_query.subscriptions
FROM previous_query
JOIN customers
  ON previous_query.customer_id = customers.customer_id;